require('dotenv').config();

const dotenv = require('dotenv');
dotenv.config({path:'sample.env'});

let mongoose = require('mongoose');

mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true,  useUnifiedTopology: true });

let peopleSchema = new mongoose.Schema({
  name : {type: String, required: true},
  age : Number,
  favoriteFoods : [String]
})

let Person = mongoose.model('Person', peopleSchema)

var createAndSavePerson = function(done){
  let Thomas = new Person({ name : 'Thomas', age : 31, favoriteFoods : ['hamburger']
  })

Thomas.save((error, data) => {
  if(error) {
    console.log(error)
  }else{
    done(null, data)
  }
})
}

let arrayOfPeople = [
  {
    name: "Charles",
    age: 20,
    favoriteFoods: ["chicken tenders"]
  }
];

var createManyPeople = function(arrayOfPeople, done){
  Person.create(arrayOfPeople, (error, createdPeople) => {
    if(error) {
      console.log(error)
    }else{
      done(null, createdPeople)
    }
  });
}

Person.find({name: "Charles"}, (error, data) => {
  if(error) {
    console.log(error)
  }else{
    console.log(data)
  }
})

var findPeopleByName = function(personName, done){
  Person.find({name: personName}, (error, arrayOfResults) => {
    if(error){
      console.log(error)
    }else{
      done(null, arrayOfResults)
    }
  });
}

var findOneByFood = function(food, done){
  Person.findOne({favoriteFoods : {$all : [food]}}, (error, result) => {
    if(error){
      console.log(error)
    }else{
      done(null, result)
    }
  })
};

var findPersonById = function(personId, done) {
  Person.findById(personId, (error, data) => {
    if(error) {
      console.log(error)
    }else{
      done(null, data)
    }
  })
};

var findEditThenSave = function(personId, done) {
  var foodToAdd = "hamburger";
  Person.findById(personId, (error, result) => {
    if(error) {
      console.log(error)
    }else{
      result.favoriteFoods.push(foodToAdd)
      result.save((error, updatedResult) => {
        if(error) {
          console.log(error)
        }else{
          done(null, updatedResult)
        }
      })
    }
  })
}

var findAndUpdate = function(personName, done) {
  var ageToSet = 20;
  Person.findOneAndUpdate({name: personName}, {age: ageToSet}, {new: true}, (error, updatedRecord) => {
    if(error){
      console.log(error)
    }else{
      done(null, updatedRecord)
    }
  })
};

var removeById = function(personId, done) {
  Person.findByIdAndRemove(personId, (error, deletedRecord) => {
    if(error){
      console.log(error)
    }else{
      done(null, deletedRecord)
    }
  })
};

var removeManyPeople = function(done){
  var nameToRemove = "Mary";
  Person.remove({name: nameToRemove}, (error, JSONStatus) => {
    if(error){
      console.log(error)
    }else{
      done(null, JSONStatus)
    }
  })
};

var queryChain = function(done) {
  foodToSearch = "burrito";
  Person.find({favoriteFoods: {$all: [foodToSearch]}}).sort({name: 'asc'}).limit(2).select('-age').exec((error, filteredResults) => {
    if(error) {
      console.log(error)
    }else{
      done(null, filteredResults)
    }
  })
};

// const createAndSavePerson = (done) => {
//   done(null /*, data*/);
// };

// const createManyPeople = (arrayOfPeople, done) => {
//   done(null /*, data*/);
// };

// const findPeopleByName = (personName, done) => {
//   done(null /*, data*/);
// };

// const findOneByFood = (food, done) => {
//   done(null /*, data*/);
// };

// const findPersonById = (personId, done) => {
//   done(null /*, data*/);
// };

// const findEditThenSave = (personId, done) => {
//   const foodToAdd = "hamburger";

//   done(null /*, data*/);
// };

// const findAndUpdate = (personName, done) => {
//   const ageToSet = 20;

//   done(null /*, data*/);
// };

// const removeById = (personId, done) => {
//   done(null /*, data*/);
// };

// const removeManyPeople = (done) => {
//   const nameToRemove = "Mary";

//   done(null /*, data*/);
// };

// const queryChain = (done) => {
//   const foodToSearch = "burrito";

//   done(null /*, data*/);
// };

/** **Well Done !!**
/* You completed these challenges, let's go celebrate !
 */

//----- **DO NOT EDIT BELOW THIS LINE** ----------------------------------

exports.PersonModel = Person;
exports.createAndSavePerson = createAndSavePerson;
exports.findPeopleByName = findPeopleByName;
exports.findOneByFood = findOneByFood;
exports.findPersonById = findPersonById;
exports.findEditThenSave = findEditThenSave;
exports.findAndUpdate = findAndUpdate;
exports.createManyPeople = createManyPeople;
exports.removeById = removeById;
exports.removeManyPeople = removeManyPeople;
exports.queryChain = queryChain;
