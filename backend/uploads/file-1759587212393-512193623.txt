Backend Exercise Tracker

to get mongodb link: 
1. mongodb website
2. login
3. cluster > connect > drivers > scroll n get the link
	
looks like this: 
mongodb+srv://icharles07222005_db_user:<db_password>@cluster0.hpiti3w.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0

4. change the <db_password> to password ng db mo

Exercise Tracker
1. clone then open in vs
2. npm install mongodb mongoose
3. change sample.env to .env
4. in .env, if no port number put 3000 or any
5. in .env add MONGO_URI= <mongodb link>

index.js
const express = require('express')
const app = express()
const cors = require('cors')
require('dotenv').config()
const mongoose = require('mongoose');
const { Schema } = mongoose;

mongoose.connect(process.env.MONGO_URI)

const UserSchema = new Schema({
  username: String,
}) 
const User = mongoose.model("User", UserSchema);

const ExerciseSchema = new Schema({
  user_id: { type: String, required: true},
  description: String,
  duration: Number,
  date: Date
});
const Exercise = mongoose.model("Exercise", ExerciseSchema);

app.use(cors())
app.use(express.static('public'))
app.use(express.urlencoded({ extended: true }))
app.get('/', (req, res) => {
  res.sendFile(__dirname + '/views/index.html')
});

app.get("/api/users", async (req, res) => {
  const users = await User.find({}).select("_id username");
  if (!users) {
    res.send("No Users");
  }else{
    res.json(users);
  }
})

app.post("/api/users", async (req, res) => {
  console.log(req.body)
  const userObj = new User({
    username: req.body.username
  })
  try{
  const user = await userObj.save()
  console.log(user);
  res.json(user)
  }catch(err){
    console.log(err)
  }
})

app.post("/api/users/:_id/exercises", async (req, res) => {
  const id = req.params._id;
  const { description, duration, date } = req.body

  try {
    const user = await User.findById(id)
    if (!user) {
      res.send("Could not find user.")
    }else{
      const exerciseObj = new Exercise({
        user_id: user._id,
        description,
        duration,
        date: date ? new Date(date) : new Date()
      })
      const exercise = await exerciseObj.save()
      res.json ({
        _id: user._id,
        username: user.username,
        description: exercise.description,
        duration: exercise.duration,
        date: new Date(exercise.date).toDateString()
      })
    }
    }catch(err){
      console.log(err)
      res.send("There was an error saving the exercise.")
  }
})

app.get("/api/users/:_id/logs", async (req, res) => {
  const { from, to, limit } = req.query;
  const id = req.params._id;
  const user = await User.findById(id);
  if(!user){
    res.send("Could not find user")
    return;
  }
  let dateObj = {}
  if(from) {
    dateObj["$gte"] = new Date(from)
  }
  if(to) {
    dateObj["$lte"] = new Date(to)
  }
  let filter = {
    user_id: id
  }
  if(from || to){
    filter.date = dateObj;
  }

  const exercises = await Exercise.find(filter).limit(+limit ?? 500)

  const log = exercises.map(e=> ({
    description: e.description,
    duration: e.duration,
    date: e.date.toDateString()
  }))

  res.json({
    username: user.username,
    count: exercises.length,
    _id: user._id,
    log
  })

})

const listener = app.listen(process.env.PORT || 3000, () => {
  console.log('Your app is listening on port ' + listener.address().port)
})
